// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Switch /> renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Switch
    id="enLangFilter"
    label="Original Language"
    switchToggle={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <input
          aria-label="Original Language Checkbox"
          className="custom-control-input"
          id="enLangFilter"
          name="enLangFilter"
          onChange={[MockFunction]}
          type="checkbox"
        />,
        <label
          aria-describedby="enLangFilter"
          aria-label="Original Language filter"
          className="custom-control-label"
          htmlFor="enLangFilter"
        >
          Original Language
        </label>,
      ],
      "className": "custom-control custom-switch",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-label": "Original Language Checkbox",
          "className": "custom-control-input",
          "id": "enLangFilter",
          "name": "enLangFilter",
          "onChange": [MockFunction],
          "type": "checkbox",
        },
        "ref": null,
        "rendered": null,
        "type": "input",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "aria-describedby": "enLangFilter",
          "aria-label": "Original Language filter",
          "children": "Original Language",
          "className": "custom-control-label",
          "htmlFor": "enLangFilter",
        },
        "ref": null,
        "rendered": "Original Language",
        "type": "label",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <input
            aria-label="Original Language Checkbox"
            className="custom-control-input"
            id="enLangFilter"
            name="enLangFilter"
            onChange={[MockFunction]}
            type="checkbox"
          />,
          <label
            aria-describedby="enLangFilter"
            aria-label="Original Language filter"
            className="custom-control-label"
            htmlFor="enLangFilter"
          >
            Original Language
          </label>,
        ],
        "className": "custom-control custom-switch",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-label": "Original Language Checkbox",
            "className": "custom-control-input",
            "id": "enLangFilter",
            "name": "enLangFilter",
            "onChange": [MockFunction],
            "type": "checkbox",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "aria-describedby": "enLangFilter",
            "aria-label": "Original Language filter",
            "children": "Original Language",
            "className": "custom-control-label",
            "htmlFor": "enLangFilter",
          },
          "ref": null,
          "rendered": "Original Language",
          "type": "label",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
