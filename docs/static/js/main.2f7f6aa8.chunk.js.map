{"version":3,"sources":["components/header/HeaderBar.js","components/poster/Poster.js","components/spinner/Spinner.js","components/switch/Switch.js","components/button/Button.js","components/modal/Modal.js","components/filter/Filter.js","utils/config.js","utils/request.js","movies/MovieDetails.js","movies/Movies.js","movies/MovieService.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","react_default","a","createElement","Navbar_default","className","expand","sticky","role","Brand","href","Poster","_ref","url","id","name","click","type","onClick","onKeyPress","alt","src","concat","defaultProps","Spinner","Switch","switchToggle","label","aria-label","onChange","htmlFor","aria-describedby","Button","aria","Object","assign","CommonModal","show","onHide","title","children","Modal_default","size","aria-labelledby","centered","Header","Title","button_Button","Body","Filter","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","enLangFilter","adultFilter","ratingFilter","handleInputChange","bind","assertThisInitialized","onFilterChange","PropTypes","func","isRequired","_this$state","vote_average","original_language","commonFilters","adult","objectSpread","e","target","checked","value","val","setState","defineProperty","_this2","_this$state2","aria-controls","aria-expanded","Collapse_default","in","min","max","step","switch_Switch","Component","key","api","utils_request","request","axios","get","then","resp","Promise","resolve","data","catch","err","reject","MovieDetails","movie","modal_Modal","Row_default","Col_default","sm","lg","components_poster_Poster","poster_path","md","overview","tagline","status","release_date","Movies","movies","source","loading","showModal","error","errMsg","onMovieClick","onModalClose","onErrorModalHide","results","handleError","_this3","loadMovieById","filters","newMovies","keys","filter","every","prop","filterMovies","toString","_this4","filter_Filter","map","m","original_title","spinner_Spinner","movies_MovieDetails","App","header_HeaderBar","Container_default","fluid","movies_Movies","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2f7f6aa8.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './../../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Header.scss';\n\n/**\n * Header component.\n */\nconst HeaderBar = () => (\n    <Navbar className=\"movie-header\" expand=\"lg\" sticky=\"top\" role=\"banner\">\n        <Navbar.Brand href=\"#home\" className=\"movie-header__brand\">\n            {/* <img\n                alt=\"\"\n                src={logo}\n                width=\"36\"\n                height=\"36\"\n                className=\"d-inline-block align-top\"\n            /> */}\n            React Movies\n        </Navbar.Brand>\n    </Navbar>\n);\n\nexport default HeaderBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Poster.scss';\n\n/**\n * Poster component.\n */\nconst Poster = ({ url, id, name, click }) => (\n    <button\n        type=\"button\"\n        className=\"btn btn-link\"\n        onClick={() => click(id)}\n        onKeyPress={() => click(id)}\n    >\n        <figure className=\"movie-poster d-flex justify-content-center mb-0\">\n            <img\n                className=\"movie-poster__image d-flex rounded\"\n                alt={name}\n                src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2${url}`}\n                role=\"presentation\"\n            />\n        </figure>\n    </button>\n);\n/**\n * Poster default props.\n */\nPoster.defaultProps = {\n    id: 0,\n    name: 'movie',\n    click: () => {},\n};\n/**\n * Poster props types.\n */\nPoster.propTypes = {\n    /** Movie poster url */\n    url: PropTypes.string.isRequired,\n    /** Movie id to map handler */\n    id: PropTypes.number,\n    /** Movie name as alt for image */\n    name: PropTypes.string,\n    /** Gets called when the user clicks on the poster(image) */\n    click: PropTypes.func,\n};\n\nexport default Poster;\n","import React from 'react';\n\n/**\n * Spinner component.\n */\nconst Spinner = () => (\n    <div className=\"spinner-border text-primary my-2\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Switch component.\n */\nconst Switch = ({ switchToggle, id, label }) => (\n    <div className=\"custom-control custom-switch\">\n        <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            aria-label={`${label} Checkbox`}\n            id={id}\n            name={id}\n            onChange={switchToggle}\n        />\n        <label\n            className=\"custom-control-label\"\n            htmlFor={id}\n            aria-label={`${label} filter`}\n            aria-describedby={id}\n        >\n            {label}\n        </label>\n    </div>\n);\n/**\n * Switch props types.\n */\nSwitch.propTypes = {\n    /** Id to be assigned to the control. */\n    id: PropTypes.string.isRequired,\n    /** Display value */\n    label: PropTypes.string.isRequired,\n    /** Gets called when the user clicks on switch */\n    switchToggle: PropTypes.func.isRequired,\n};\nexport default Switch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Button component.\n */\nconst Button = ({ aria, label, click }) => (\n    <button\n        type=\"button\"\n        onClick={click}\n        aria-label={label}\n        {...aria}\n        className=\"btn btn-primary my-2\"\n    >\n        {label}\n    </button>\n);\n/**\n * Button default props.\n */\nButton.defaultProps = {\n    aria: {},\n};\n/**\n * Button props types.\n */\nButton.propTypes = {\n    /** Id to be assigned to the control. */\n    aria: PropTypes.shape({ 'aria-controls': PropTypes.string }),\n    /** Display value */\n    label: PropTypes.string.isRequired,\n    /** Gets called when the user clicks on button */\n    click: PropTypes.func.isRequired,\n};\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from '../button';\n\n/**\n * Modal component.\n */\nconst CommonModal = ({ show, onHide, title, children }) => (\n    <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"movie-details\"\n        className=\"movie-modal\"\n        centered\n    >\n        <Modal.Header className=\"align-items-center\">\n            <Modal.Title id=\"movie-details\">{title}</Modal.Title>\n            <Button label=\"Close\" click={onHide} />\n        </Modal.Header>\n        <Modal.Body>{children}</Modal.Body>\n    </Modal>\n);\n/**\n * Modal props types.\n */\nCommonModal.propTypes = {\n    /** Toggle modal */\n    show: PropTypes.bool.isRequired,\n    /** Gets called when the modal is closed. */\n    onHide: PropTypes.func.isRequired,\n    /** Movie details */\n    title: PropTypes.string.isRequired,\n    /** Children for modal body */\n    children: PropTypes.element.isRequired,\n};\n\nexport default CommonModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Switch from '../switch';\nimport Button from '../button';\n/**\n * Filter component.\n */\nclass Filter extends Component {\n    static get propTypes() {\n        return {\n            /** Gets called when the user clicks on the 'Apply' button */\n            onChange: PropTypes.func.isRequired,\n        };\n    }\n\n    /**\n     * Intilalizes the state and binds all methods.\n     *\n     * @param {Object} props - access 'props'\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            enLangFilter: false,\n            adultFilter: false,\n            ratingFilter: 0,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.onFilterChange = this.onFilterChange.bind(this);\n    }\n\n    /**\n     * Prepares filter options and pass to the parent component.\n     */\n    onFilterChange() {\n        const {\n            ratingFilter: vote_average,\n            enLangFilter: original_language,\n            adultFilter: adult,\n        } = this.state;\n        const { onChange } = this.props;\n        const commonFilters = { vote_average, adult };\n        const filters = original_language\n            ? { ...commonFilters, original_language: 'en' }\n            : commonFilters;\n        onChange(filters);\n    }\n\n    /**\n     * Updates the state as user updates the filter options.\n     *\n     * @param {Event} e - an event from dom controls\n     */\n    handleInputChange(e) {\n        const { target } = e;\n        const { type, name, checked, value } = target;\n        const val = type === 'checkbox' ? checked : value;\n        this.setState({ [name]: val });\n    }\n\n    /**\n     * Render method for component\n     */\n    render() {\n        const { open, ratingFilter } = this.state;\n        return (\n            <div className=\"bg-secondary px-3 rounded\">\n                <section className=\"d-flex justify-content-between align-items-center\">\n                    <h6 className=\"mb-0\">Popular movies</h6>\n                    <Button\n                        label=\"Filter\"\n                        aria={{\n                            'aria-controls': 'movie-filter',\n                            'aria-expanded': open,\n                        }}\n                        click={() => this.setState({ open: !open })}\n                    />\n                </section>\n                <Collapse in={open}>\n                    <div\n                        id=\"movie-filter\"\n                        role=\"toolbar\"\n                        aria-label=\"Filter options\"\n                        className=\"border-top border-primary mt-1 py-3 px-1\"\n                    >\n                        <h6 className=\"text-uppercase\">Filter options</h6>\n                        <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                            <div>\n                                <label\n                                    htmlFor=\"rating-filter\"\n                                    aria-label=\"Rating filter\"\n                                    aria-describedby=\"rating-filter\"\n                                >\n                                    Rating (&ge;)\n                                    <input\n                                        type=\"range\"\n                                        className=\"custom-range\"\n                                        aria-label=\"Rating range\"\n                                        onChange={this.handleInputChange}\n                                        name=\"ratingFilter\"\n                                        min=\"0\"\n                                        max=\"10\"\n                                        step=\"0.5\"\n                                        value={ratingFilter}\n                                        id=\"rating-filter\"\n                                    />\n                                    <span className=\"text-primary position-absolute font-weight-bold ml-2\">\n                                        {ratingFilter}\n                                    </span>\n                                </label>\n                            </div>\n                            <Switch\n                                id=\"adultFilter\"\n                                label=\"Adult\"\n                                switchToggle={this.handleInputChange}\n                            />\n                            <Switch\n                                id=\"enLangFilter\"\n                                label=\"Original Language\"\n                                switchToggle={this.handleInputChange}\n                            />\n                        </div>\n                        <div className=\"mt-1\">\n                            <Button\n                                label=\"Apply\"\n                                click={this.onFilterChange}\n                            />\n                        </div>\n                    </div>\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default Filter;\n","/** Api key for the movie db api. */\nexport const key = '?api_key=7985411c015901cd0f030ce010fa69c4';\n/** Api url for the movie db api. */\nexport const api = 'https://api.themoviedb.org/3';\n/** Image url for the movie poster */\nexport const imageUrl = 'https://image.tmdb.org/t/p/w185_and_h278_bestv2';\n","import axios from 'axios';\n/**\n * Request service for network calls.\n */\nexport default {\n    /**\n     * Get request\n     *\n     * @param {string} url - network request url\n     * @param {Object} request - request configuration\n     */\n    get(url, request) {\n        return axios\n            .get(url, request)\n            .then(resp => Promise.resolve(resp.data))\n            .catch(err => Promise.reject(err));\n    },\n};\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport PropTypes from 'prop-types';\nimport { Poster, Modal } from '../components';\n\nconst MovieDetails = ({ show, onHide, movie }) => (\n    <Modal show={show} title={movie.title} onHide={onHide}>\n        <Row>\n            <Col sm lg={4}>\n                <Poster name={movie.title} url={`${movie.poster_path}`} />\n            </Col>\n            <Col sm lg={8}>\n                <Row>\n                    <Col md={12}>\n                        <p className=\"h6 text-primary\">Overview</p>\n                        <p className=\"mb-0\">\n                            <em>{movie.overview}</em>\n                        </p>\n                    </Col>\n                </Row>\n                <div className=\"dropdown-divider\" />\n                <dl className=\"row movie-modal__summary--list\">\n                    <dt className=\"col-sm-3 text-primary\">Tagline</dt>\n                    <dd className=\"col-sm-9\">\n                        {movie.tagline || 'Not available'}\n                    </dd>\n                    <dt className=\"col-sm-3 text-primary\">Rating</dt>\n                    <dd className=\"col-sm-9\">{movie.vote_average}</dd>\n                    <dt className=\"col-sm-3 text-primary\">Status</dt>\n                    <dd className=\"col-sm-9\">{movie.status}</dd>\n                    <dt className=\"col-sm-3 text-primary\">Release Date</dt>\n                    <dd className=\"col-sm-9\">{movie.release_date}</dd>\n                    <dt className=\"col-sm-3 text-primary\">Language</dt>\n                    <dd className=\"col-sm-9 text-uppercase\">\n                        {movie.original_language}\n                    </dd>\n                </dl>\n            </Col>\n        </Row>\n    </Modal>\n);\n\n/**\n * MovieDetails props types.\n */\nMovieDetails.propTypes = {\n    /** Toggle modal */\n    show: PropTypes.bool.isRequired,\n    /** Gets called when the modal is closed. */\n    onHide: PropTypes.func.isRequired,\n    /** Movie details */\n    movie: PropTypes.shape({ title: PropTypes.string }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Poster, Spinner, Modal, Filter } from '../components';\nimport { loadMovies, loadMovieById, filterMovies } from './MovieService';\nimport MovieDetails from './MovieDetails';\n\n/**\n * Movie component.\n */\nclass Movies extends Component {\n    /**\n     * Intilalizes the state and binds all methods.\n     *\n     * @param {Object} props - access 'props'\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            source: [],\n            movie: {},\n            loading: true,\n            showModal: false,\n            error: false,\n            errMsg: '',\n        };\n        this.onMovieClick = this.onMovieClick.bind(this);\n        this.onModalClose = this.onModalClose.bind(this);\n        this.onErrorModalHide = this.onErrorModalHide.bind(this);\n        this.onFilterChange = this.onFilterChange.bind(this);\n    }\n\n    /**\n     * Load movies once component is mounted.\n     */\n    componentDidMount() {\n        loadMovies()\n            .then(movies => this.setState({ movies, source: movies, loading: false }))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Get a movie details\n     *\n     * @param {number} id - movie id\n     */\n    onMovieClick(id) {\n        loadMovieById(id)\n            .then(movie => this.setState({ showModal: true, movie, loading: false }))\n            .catch(err => this.handleError(err));\n    }\n\n    /**\n     * Toggle modal state on close.\n     *\n     */\n    onModalClose() {\n        this.setState({ showModal: false });\n    }\n\n    /**\n     * Toggle modal state on close.\n     *\n     * @param {Object} filters - list of set filters\n     */\n    onFilterChange(filters) {\n        const { source } = this.state;\n        const newMovies = filterMovies(source, filters);\n        this.setState({ movies: newMovies });\n    }\n\n    /**\n     * Toggle modal state on close for error.\n     *\n     */\n    onErrorModalHide() {\n        this.setState({ error: false });\n    }\n\n    /**\n     * Handles common errors for n/w requests.\n     *\n     * @param {string} err - Error message\n     */\n    handleError(err) {\n        this.setState({ loading: false, error: true, errMsg: err.toString() });\n    }\n\n    /**\n     * Render method for component\n     */\n    render() {\n        const { movies, loading, showModal, movie, error, errMsg } = this.state;\n        return (\n            <section>\n                <Filter onChange={this.onFilterChange} />\n                <Row className=\"justify-content-center\">\n                    {(!loading\n                        && movies.map(m => (\n                            <Col className=\"my-3 text-center\" key={m.id}>\n                                <Poster\n                                    id={m.id}\n                                    name={m.original_title}\n                                    url={m.poster_path}\n                                    click={this.onMovieClick}\n                                />\n                            </Col>\n                        ))) || <Spinner />}\n                </Row>\n                {showModal && (\n                    <MovieDetails\n                        show={showModal}\n                        onHide={this.onModalClose}\n                        movie={movie}\n                    />\n                )}\n                <Modal show={error} title=\"Oops!\" onHide={this.onErrorModalHide}>\n                    <strong>{errMsg}</strong>\n                </Modal>\n            </section>\n        );\n    }\n}\n\nexport default Movies;\n","import { api, key } from '../utils/config';\nimport request from '../utils/request';\n\n/**\n * Load movies from server\n *\n * @returns {Promise}\n */\nconst loadMovies = () => request.get(`${api}/movie/popular${key}`).then(({ results: movies }) => Promise.resolve(movies));\n/**\n * Load movie details by id from server\n *\n * @returns {Promise}\n */\nconst loadMovieById = id => request.get(`${api}/movie/${id}${key}`);\n/**\n * Filter movies on given criteria.\n *\n * @param {Array} movies - an array of movies\n * @param {Object} filters - filter options\n * @returns {Array}\n */\nconst filterMovies = (movies, filters) => {\n    const props = Object.keys(filters);\n    return movies.filter(movie => props.every(prop => (prop === 'vote_average'\n        ? movie[prop] >= filters[prop]\n        : movie[prop] === filters[prop])));\n};\n\nexport { loadMovies, loadMovieById, filterMovies };\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { HeaderBar } from './components';\nimport Movies from './movies/Movies';\n\nconst App = () => (\n    <div>\n        <HeaderBar />\n        <Container fluid=\"true\" className=\"py-4\">\n            <Movies />\n        </Container>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error =>\n            console.error('Error during service worker registration:', error),\n        );\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration =>\n            registration.unregister(),\n        );\n    }\n}\n","import 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}