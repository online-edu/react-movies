{"version":3,"sources":["components/header/HeaderBar.js","components/poster/Poster.js","components/spinner/Spinner.js","components/modal/Modal.js","utils/config.js","utils/request.js","movies/Movies.js","movies/MovieService.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","react_default","a","createElement","Navbar_default","className","expand","sticky","Brand","href","Poster","_ref","url","id","name","click","alt","src","concat","onClick","onKeyPress","role","defaultProps","Spinner","MovieModal","show","onHide","movie","Modal_default","size","aria-labelledby","centered","Header","Title","title","Button_default","variant","Body","Row_default","Col_default","sm","lg","components_poster_Poster","poster_path","md","overview","tagline","vote_average","status","release_date","original_language","key","api","utils_request","request","axios","get","then","resp","Promise","resolve","data","catch","err","reject","Movies","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movies","selectedMovie","loading","showModal","onMovieClick","bind","assertThisInitialized","onModalClose","_this2","setState","console","log","finally","_this3","loadMovieById","_this4","_this$state","results","map","spinner_Spinner","modal_Modal","Component","App","header_HeaderBar","Container_default","fluid","movies_Movies","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ba70719.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './../../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Header.scss';\n\nconst HeaderBar = () => (\n    <Navbar className=\"movie-header\" expand=\"lg\" sticky=\"top\">\n        <Navbar.Brand href=\"#home\">\n            {/* <img\n                alt=\"\"\n                src={logo}\n                width=\"36\"\n                height=\"36\"\n                className=\"d-inline-block align-top\"\n            /> */}\n            React Movies\n        </Navbar.Brand>\n    </Navbar>\n);\n\nexport default HeaderBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Poster.scss';\n\nconst Poster = ({ url, id, name, click }) => (\n    <figure className=\"movie-poster d-flex justify-content-center\">\n        <img\n            className=\"movie-poster__image d-flex\"\n            alt={name}\n            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2${url}`}\n            onClick={() => click(id)}\n            onKeyPress={() => click(id)}\n            role=\"presentation\"\n        />\n    </figure>\n);\n\nPoster.defaultProps = {\n    id: 0,\n    name: 'movie',\n    click: () => {},\n};\n\nPoster.propTypes = {\n    url: PropTypes.string.isRequired,\n    id: PropTypes.number,\n    name: PropTypes.string,\n    click: PropTypes.func,\n};\n\nexport default Poster;\n","import React from 'react';\n\nconst Spinner = () => (\n    <div className=\"spinner-border text-primary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Poster from '../poster';\n\nconst MovieModal = ({ show, onHide, movie }) => (\n    <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"movie-details\"\n        className=\"movie-modal\"\n        centered\n    >\n        <Modal.Header>\n            <Modal.Title>{movie.title}</Modal.Title>\n            <Button variant=\"primary\" onClick={onHide}>\n                Close\n            </Button>\n        </Modal.Header>\n        <Modal.Body>\n            <Row>\n                <Col sm lg={4}>\n                    <Poster name={movie.title} url={`${movie.poster_path}`} />\n                </Col>\n                <Col sm lg={8}>\n                    <Row>\n                        <Col md={12}>\n                            <p className=\"h6 text-primary\">Overview</p>\n                            <p className=\"mb-0\">\n                                <em>{movie.overview}</em>\n                            </p>\n                        </Col>\n                    </Row>\n                    <div className=\"dropdown-divider\" />\n                    <dl className=\"row movie-modal__summary--list\">\n                        <dt className=\"col-sm-3 text-primary\">Tagline</dt>\n                        <dd className=\"col-sm-9\">{movie.tagline}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Rating</dt>\n                        <dd className=\"col-sm-9\">{movie.vote_average}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Status</dt>\n                        <dd className=\"col-sm-9\">{movie.status}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Release Date</dt>\n                        <dd className=\"col-sm-9\">{movie.release_date}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Language</dt>\n                        <dd className=\"col-sm-9 text-uppercase\">\n                            {movie.original_language}\n                        </dd>\n                    </dl>\n                </Col>\n            </Row>\n        </Modal.Body>\n    </Modal>\n);\n\nMovieModal.propTypes = {\n    show: PropTypes.bool.isRequired,\n    onHide: PropTypes.func.isRequired,\n    movie: PropTypes.shape({ title: PropTypes.string }).isRequired,\n};\n\nexport default MovieModal;\n","export const key = '?api_key=7985411c015901cd0f030ce010fa69c4';\nexport const api = 'https://api.themoviedb.org/3';\nexport const imageUrl = 'https://image.tmdb.org/t/p/w185_and_h278_bestv2';\n","import axios from 'axios';\n\nexport default {\n    get(url, request) {\n        return axios\n            .get(url, request)\n            .then(resp => Promise.resolve(resp.data))\n            .catch(err => Promise.reject(err));\n    },\n};\n","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Poster, Spinner, Modal } from '../components';\nimport { loadMovies, loadMovieById } from './MovieService';\n\nclass Movies extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: {},\n            selectedMovie: {},\n            loading: true,\n            showModal: false,\n        };\n        this.onMovieClick = this.onMovieClick.bind(this);\n        this.onModalClose = this.onModalClose.bind(this);\n    }\n\n    componentDidMount() {\n        loadMovies()\n            .then(movies => this.setState({ movies }))\n            .catch(err => console.log(err))\n            .finally(() => this.setState({ loading: false }));\n    }\n\n    onMovieClick(id) {\n        loadMovieById(id)\n            .then(selectedMovie =>\n                this.setState({ showModal: true, selectedMovie }),\n            )\n            .catch(err => console.log(err))\n            .finally(() => this.setState({ loading: false }));\n    }\n\n    onModalClose() {\n        this.setState({ showModal: false });\n    }\n\n    render() {\n        const {\n            movies: { results },\n            loading,\n            showModal,\n            selectedMovie,\n        } = this.state;\n        return (\n            <section>\n                <Row className=\"justify-content-center\">\n                    {(!loading &&\n                        results.map(movie => (\n                            <Col className=\"my-3\" key={movie.id} sm>\n                                <Poster\n                                    id={movie.id}\n                                    alt={movie.name}\n                                    url={movie.poster_path}\n                                    click={this.onMovieClick}\n                                />\n                            </Col>\n                        ))) || <Spinner />}\n                </Row>\n                <Modal\n                    show={showModal}\n                    movie={selectedMovie}\n                    onHide={this.onModalClose}\n                />\n            </section>\n        );\n    }\n}\n\nexport default Movies;\n","import { api, key } from '../utils/config';\nimport request from '../utils/request';\n\nconst loadMovies = () => request.get(`${api}/movie/popular${key}`);\n\nconst loadMovieById = id => request.get(`${api}/movie/${id}${key}`);\n\nexport { loadMovies, loadMovieById };\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { HeaderBar } from './components';\nimport Movies from './movies/Movies';\nimport './App.scss';\n\nconst App = () => (\n    <div className=\"App\">\n        <HeaderBar />\n        <Container fluid=\"true\" className=\"py-4\">\n            <Movies />\n        </Container>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error =>\n            console.error('Error during service worker registration:', error),\n        );\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration =>\n            registration.unregister(),\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}