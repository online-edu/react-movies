{"version":3,"sources":["components/header/HeaderBar.js","components/poster/Poster.js","components/spinner/Spinner.js","components/switch/Switch.js","components/button/Button.js","components/modal/Modal.js","components/filter/Filter.js","utils/config.js","utils/request.js","movies/Movies.js","movies/MovieService.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","react_default","a","createElement","Navbar_default","className","expand","sticky","role","Brand","tabIndex","href","Poster","_ref","url","id","name","click","alt","src","concat","onClick","onKeyPress","defaultProps","Spinner","Switch","switchToggle","label","type","aria-label","onChange","htmlFor","aria-describedby","Button","aria","Object","assign","MovieModal","show","onHide","movie","Modal_default","size","aria-labelledby","centered","Header","Title","title","button_Button","Body","Row_default","Col_default","sm","lg","components_poster_Poster","poster_path","md","overview","tagline","vote_average","status","release_date","original_language","Filter","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","open","enLangFilter","adultFilter","ratingFilter","handleInputChange","bind","assertThisInitialized","onFilterChange","PropTypes","func","isRequired","_this$state","commonFilters","adult","objectSpread","e","target","value","checked","setState","defineProperty","_this2","_this$state2","aria-controls","aria-expanded","Collapse_default","in","min","max","step","switch_Switch","Component","key","api","utils_request","request","axios","get","then","resp","Promise","resolve","data","catch","err","reject","Movies","movies","source","loading","showModal","onMovieClick","onModalClose","results","console","log","finally","_this3","loadMovieById","filters","newMovies","keys","filter","every","prop","filterMovies","_this4","filter_Filter","map","m","i","spinner_Spinner","modal_Modal","App","header_HeaderBar","Container_default","fluid","movies_Movies","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gLAuBeA,SAfG,kBACdC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,UAAU,eAAeC,OAAO,KAAKC,OAAO,MAAMC,KAAK,UAC3DP,EAAAC,EAAAC,cAACC,EAAAF,EAAOO,MAAR,CAAcC,SAAS,IAAIC,KAAK,QAAQN,UAAU,uBAAlD,mBCHFO,SAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,IAAKC,EAARF,EAAQE,GAAIC,EAAZH,EAAYG,KAAMC,EAAlBJ,EAAkBI,MAAOP,EAAzBG,EAAyBH,SAAzB,OACXT,EAAAC,EAAAC,cAAA,UAAQE,UAAU,8CACdJ,EAAAC,EAAAC,cAAA,OACIE,UAAU,qCACVa,IAAKF,EACLG,IAAG,kDAAAC,OAAoDN,GACvDO,QAAS,kBAAMJ,EAAMF,IACrBO,WAAY,kBAAML,EAAMF,IACxBP,KAAK,eACLE,SAAUA,OAOtBE,EAAOW,aAAe,CAClBR,GAAI,EACJC,KAAM,QACNC,MAAO,cAkBIL,QCjCAY,EANC,kBACZvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8BAA8BG,KAAK,UAC9CP,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAhB,gBCiCOoB,EAlCA,SAAAZ,GAAA,IAAGa,EAAHb,EAAGa,aAAcX,EAAjBF,EAAiBE,GAAIL,EAArBG,EAAqBH,SAAUiB,EAA/Bd,EAA+Bc,MAA/B,OACX1B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gCACXJ,EAAAC,EAAAC,cAAA,SACIyB,KAAK,WACLvB,UAAU,uBACVwB,aAAA,GAAAT,OAAeO,EAAf,aACAZ,GAAIA,EACJC,KAAMD,EACNe,SAAUJ,EACVhB,SAAUA,IAEdT,EAAAC,EAAAC,cAAA,SACIE,UAAU,uBACV0B,QAAShB,EACTc,aAAA,GAAAT,OAAeO,EAAf,WACAK,mBAAkBjB,GAEjBY,wDCQEM,EAzBA,SAAApB,GAAA,IAAGqB,EAAHrB,EAAGqB,KAAMxB,EAATG,EAASH,SAAUiB,EAAnBd,EAAmBc,MAAOV,EAA1BJ,EAA0BI,MAA1B,OACXhB,EAAAC,EAAAC,cAAA,SAAAgC,OAAAC,OAAA,CACIR,KAAK,SACLP,QAASJ,EACTY,aAAYF,EACZjB,SAAUA,GACNwB,EALR,CAMI7B,UAAU,yBAETsB,ICsDMU,EA3DI,SAAAxB,GAAA,IAAGyB,EAAHzB,EAAGyB,KAAMC,EAAT1B,EAAS0B,OAAQC,EAAjB3B,EAAiB2B,MAAjB,OACfvC,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CACIoC,KAAMA,EACNC,OAAQA,EACRG,KAAK,KACLC,kBAAgB,gBAChBtC,UAAU,cACVuC,UAAQ,GAER3C,EAAAC,EAAAC,cAACsC,EAAAvC,EAAM2C,OAAP,KACI5C,EAAAC,EAAAC,cAACsC,EAAAvC,EAAM4C,MAAP,CAAa/B,GAAG,iBAAiByB,EAAMO,OACvC9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAQrB,MAAM,QAAQV,MAAOsB,KAEjCtC,EAAAC,EAAAC,cAACsC,EAAAvC,EAAM+C,KAAP,KACIhD,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,KACID,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAKkD,IAAE,EAACC,GAAI,GACRpD,EAAAC,EAAAC,cAACmD,EAAD,CAAQtC,KAAMwB,EAAMO,MAAOjC,IAAG,GAAAM,OAAKoB,EAAMe,gBAE7CtD,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAKkD,IAAE,EAACC,GAAI,GACRpD,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,KACID,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAKsD,GAAI,IACLvD,EAAAC,EAAAC,cAAA,KAAGE,UAAU,mBAAb,YACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,QACTJ,EAAAC,EAAAC,cAAA,UAAKqC,EAAMiB,aAIvBxD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kCACVJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,WACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YACTmC,EAAMkB,SAAW,iBAEtBzD,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,UACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAYmC,EAAMmB,cAChC1D,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,UACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAYmC,EAAMoB,QAChC3D,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,gBACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,YAAYmC,EAAMqB,cAChC5D,EAAAC,EAAAC,cAAA,MAAIE,UAAU,yBAAd,YACAJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,2BACTmC,EAAMsB,0HCuFpBC,cAtHX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAAgC,KAAAJ,IACfE,EAAA9B,OAAAiC,EAAA,EAAAjC,CAAAgC,KAAAhC,OAAAkC,EAAA,EAAAlC,CAAA4B,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACTC,MAAM,EACNC,cAAc,EACdC,aAAa,EACbC,aAAc,GAElBV,EAAKW,kBAAoBX,EAAKW,kBAAkBC,KAAvB1C,OAAA2C,EAAA,EAAA3C,QAAA2C,EAAA,EAAA3C,CAAA8B,KACzBA,EAAKc,eAAiBd,EAAKc,eAAeF,KAApB1C,OAAA2C,EAAA,EAAA3C,QAAA2C,EAAA,EAAA3C,CAAA8B,KATPA,8EAVf,MAAO,CAEHnC,SAAUkD,IAAUC,KAAKC,sEAsBhB,IAAAC,EAKThB,KAAKI,MAHSZ,EAFLwB,EAETR,aACcb,EAHLqB,EAGTV,aAIEW,EAAgB,CAAEzB,eAAc0B,MAPzBF,EAITT,cAOJ5C,EALqBqC,KAAKH,MAAlBlC,UAEQgC,EAAiB3B,OAAAmD,EAAA,EAAAnD,CAAA,GACtBiD,EADsB,CACPtB,kBAAmB,OACvCsB,6CAQQG,GAAG,IACTC,EAAWD,EAAXC,OACA5D,EAAe4D,EAAf5D,KAAMZ,EAASwE,EAATxE,KACRyE,EAAiB,aAAT7D,EAAsB4D,EAAOE,QAAUF,EAAOC,MAC5DtB,KAAKwB,SAALxD,OAAAyD,EAAA,EAAAzD,CAAA,GAAiBnB,EAAOyE,qCAKnB,IAAAI,EAAA1B,KAAA2B,EAC0B3B,KAAKI,MAA5BC,EADHsB,EACGtB,KAAMG,EADTmB,EACSnB,aACd,OACI1E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACXJ,EAAAC,EAAAC,cAAA,WAASE,UAAU,qDACfJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,QAAd,kBACAJ,EAAAC,EAAAC,cAAC6C,EAAD,CACItC,SAAS,IACTiB,MAAM,SACNO,KAAM,CACF6D,gBAAiB,eACjBC,gBAAiBxB,GAErBvD,MAAO,kBAAM4E,EAAKF,SAAS,CAAEnB,MAAOA,QAG5CvE,EAAAC,EAAAC,cAAC8F,EAAA/F,EAAD,CAAUgG,GAAI1B,GACVvE,EAAAC,EAAAC,cAAA,OACIY,GAAG,eACHP,KAAK,UACLqB,aAAW,iBACXxB,UAAU,4CAEVJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAd,kBACAJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,+DACXJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACI4B,QAAQ,gBACRF,aAAW,gBACXG,mBAAiB,iBAHrB,kBAMI/B,EAAAC,EAAAC,cAAA,SACIyB,KAAK,QACLvB,UAAU,eACVwB,aAAW,eACXC,SAAUqC,KAAKS,kBACf5D,KAAK,eACLmF,IAAI,IACJC,IAAI,KACJC,KAAK,MACLZ,MAAOd,EACP5D,GAAG,gBACHL,SAAS,MAEbT,EAAAC,EAAAC,cAAA,QAAME,UAAU,wDACXsE,KAIb1E,EAAAC,EAAAC,cAACmG,EAAD,CACIvF,GAAG,cACHL,SAAS,IACTiB,MAAM,QACND,aAAcyC,KAAKS,oBAEvB3E,EAAAC,EAAAC,cAACmG,EAAD,CACIvF,GAAG,eACHL,SAAS,IACTiB,MAAM,oBACND,aAAcyC,KAAKS,qBAG3B3E,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAC6C,EAAD,CACItC,SAAS,IACTiB,MAAM,QACNV,MAAOkD,KAAKY,4BAxHvBwB,aCPRC,EAAM,4CAENC,EAAM,gDCCJC,EAAA,SAOP5F,EAAK6F,GACL,OAAOC,IACFC,IAAI/F,EAAK6F,GACTG,KAAK,SAAAC,GAAI,OAAIC,QAAQC,QAAQF,EAAKG,QAClCC,MAAM,SAAAC,GAAG,OAAIJ,QAAQK,OAAOD,MCkF1BE,cAlFX,SAAAA,EAAYtD,GAAO,IAAAC,EAAA,OAAA9B,OAAA+B,EAAA,EAAA/B,CAAAgC,KAAAmD,IACfrD,EAAA9B,OAAAiC,EAAA,EAAAjC,CAAAgC,KAAAhC,OAAAkC,EAAA,EAAAlC,CAAAmF,GAAAhD,KAAAH,KAAMH,KACDO,MAAQ,CACTgD,OAAQ,GACRC,OAAQ,GACRhF,MAAO,GACPiF,SAAS,EACTC,WAAW,GAEfzD,EAAK0D,aAAe1D,EAAK0D,aAAa9C,KAAlB1C,OAAA2C,EAAA,EAAA3C,QAAA2C,EAAA,EAAA3C,CAAA8B,KACpBA,EAAK2D,aAAe3D,EAAK2D,aAAa/C,KAAlB1C,OAAA2C,EAAA,EAAA3C,QAAA2C,EAAA,EAAA3C,CAAA8B,KACpBA,EAAKc,eAAiBd,EAAKc,eAAeF,KAApB1C,OAAA2C,EAAA,EAAA3C,QAAA2C,EAAA,EAAA3C,CAAA8B,KAXPA,mFAgBC,IAAA4B,EAAA1B,KCtBpBwC,EAAA,GAAAvF,OACYqF,EADZ,kBAAArF,OACgCoF,IAC3BM,KAAK,SAAAjG,GAAA,IAAY0G,EAAZ1G,EAAGgH,QAAH,OAAyBb,QAAQC,QAAQM,KDsB1CT,KAAK,SAAAS,GAAM,OAAI1B,EAAKF,SAAS,CAAE4B,SAAQC,OAAQD,MAC/CJ,MAAM,SAAAC,GAAG,OAAIU,QAAQC,IAAIX,KACzBY,QAAQ,kBAAMnC,EAAKF,SAAS,CAAE8B,SAAS,2CAOnC1G,GAAI,IAAAkH,EAAA9D,MCzBC,SAAApD,GAAE,OAAI4F,EAAA,GAAAvF,OAAeqF,EAAf,WAAArF,OAA4BL,GAA5BK,OAAiCoF,KD0BrD0B,CAAcnH,GACT+F,KAAK,SAAAtE,GAAK,OAAIyF,EAAKtC,SAAS,CAAE+B,WAAW,EAAMlF,YAC/C2E,MAAM,SAAAC,GAAG,OAAIU,QAAQC,IAAIX,KACzBY,QAAQ,kBAAMC,EAAKtC,SAAS,CAAE8B,SAAS,6CAO5CtD,KAAKwB,SAAS,CAAE+B,WAAW,2CAOhBS,GAAS,IAEdC,ECrCO,SAACb,EAAQY,GAC1B,IAAMnE,EAAQ7B,OAAOkG,KAAKF,GAC1B,OAAOZ,EAAOe,OAAO,SAAA9F,GAAK,OACtBwB,EAAMuE,MAAM,SAAAC,GAAI,MACH,iBAATA,EACMhG,EAAMgG,IAASL,EAAQK,GACvBhG,EAAMgG,KAAUL,EAAQK,OD+BhBC,CADCtE,KAAKI,MAAhBiD,OAC+BW,GACvChE,KAAKwB,SAAS,CAAE4B,OAAQa,qCAKnB,IAAAM,EAAAvE,KAAAgB,EACyChB,KAAKI,MAA3CgD,EADHpC,EACGoC,OAAQE,EADXtC,EACWsC,QAASC,EADpBvC,EACoBuC,UAAWlF,EAD/B2C,EAC+B3C,MACpC,OACIvC,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAACwI,EAAD,CAAQ7G,SAAUqC,KAAKY,iBACvB9E,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CAAKG,UAAU,2BACRoH,GACCF,EAAOqB,IAAI,SAACC,EAAGC,GAAJ,OACP7I,EAAAC,EAAAC,cAACgD,EAAAjD,EAAD,CAAKG,UAAU,OAAOmG,IAAKqC,EAAE9H,IACzBd,EAAAC,EAAAC,cAACmD,EAAD,CACIvC,GAAI8H,EAAE9H,GACNG,IAAK2H,EAAE7H,KACPF,IAAK+H,EAAEtF,YACPtC,MAAOyH,EAAKf,aACZjH,SAAUoI,EAAI,QAGnB7I,EAAAC,EAAAC,cAAC4I,EAAD,OAEf9I,EAAAC,EAAAC,cAAC6I,EAAD,CACI1G,KAAMoF,EACNlF,MAAOA,EACPD,OAAQ4B,KAAKyD,uBAjFZrB,aEKN0C,EATH,kBACRhJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+I,EAAD,MACAjJ,EAAAC,EAAAC,cAACgJ,EAAAjJ,EAAD,CAAWkJ,MAAM,OAAO/I,UAAU,QAC9BJ,EAAAC,EAAAC,cAACkJ,EAAD,SCGQC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAO3J,EAAAC,EAAAC,cAAC0J,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GAAY,OAC3CA,EAAaC","file":"static/js/main.fe1845f1.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './../../logo.svg';\nimport Navbar from 'react-bootstrap/Navbar';\nimport './Header.scss';\n\n/**\n * Header component.\n */\nconst HeaderBar = () => (\n    <Navbar className=\"movie-header\" expand=\"lg\" sticky=\"top\" role=\"banner\">\n        <Navbar.Brand tabIndex=\"1\" href=\"#home\" className=\"movie-header__brand\">\n            {/* <img\n                alt=\"\"\n                src={logo}\n                width=\"36\"\n                height=\"36\"\n                className=\"d-inline-block align-top\"\n            /> */}\n            React Movies\n        </Navbar.Brand>\n    </Navbar>\n);\n\nexport default HeaderBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Poster.scss';\n\n/**\n * Poster component.\n */\nconst Poster = ({ url, id, name, click, tabIndex }) => (\n    <figure className=\"movie-poster d-flex justify-content-center\">\n        <img\n            className=\"movie-poster__image d-flex rounded\"\n            alt={name}\n            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2${url}`}\n            onClick={() => click(id)}\n            onKeyPress={() => click(id)}\n            role=\"presentation\"\n            tabIndex={tabIndex}\n        />\n    </figure>\n);\n/**\n * Poster default props.\n */\nPoster.defaultProps = {\n    id: 0,\n    name: 'movie',\n    click: () => {},\n};\n/**\n * Poster props types.\n */\nPoster.propTypes = {\n    /** Movie poster url */\n    url: PropTypes.string.isRequired,\n    /** Movie id to map handler */\n    id: PropTypes.number,\n    /** Movie name as alt for image */\n    name: PropTypes.string,\n    /** Gets called when the user clicks on the poster(image) */\n    click: PropTypes.func,\n    /** Maintain tab index for keyboard navigation. */\n    tabIndex: PropTypes.number,\n};\n\nexport default Poster;\n","import React from 'react';\n\n/**\n * Spinner component.\n */\nconst Spinner = () => (\n    <div className=\"spinner-border text-primary\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n    </div>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Switch component.\n */\nconst Switch = ({ switchToggle, id, tabIndex, label }) => (\n    <div className=\"custom-control custom-switch\">\n        <input\n            type=\"checkbox\"\n            className=\"custom-control-input\"\n            aria-label={`${label} Checkbox`}\n            id={id}\n            name={id}\n            onChange={switchToggle}\n            tabIndex={tabIndex}\n        />\n        <label\n            className=\"custom-control-label\"\n            htmlFor={id}\n            aria-label={`${label} filter`}\n            aria-describedby={id}\n        >\n            {label}\n        </label>\n    </div>\n);\n/**\n * Switch props types.\n */\nSwitch.propTypes = {\n    /** Id to be assigned to the control. */\n    id: PropTypes.number.isRequired,\n    /** Display value */\n    label: PropTypes.string.isRequired,\n    /** Gets called when the user clicks on switch */\n    switchToggle: PropTypes.func.isRequired,\n    /** Maintain tab index for keyboard navigation. */\n    tabIndex: PropTypes.number.isRequired,\n};\nexport default Switch;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Button component.\n */\nconst Button = ({ aria, tabIndex, label, click }) => (\n    <button\n        type=\"button\"\n        onClick={click}\n        aria-label={label}\n        tabIndex={tabIndex}\n        {...aria}\n        className=\"btn btn-primary my-2\"\n    >\n        {label}\n    </button>\n);\n/**\n * Button props types.\n */\nButton.propTypes = {\n    /** Id to be assigned to the control. */\n    aria: PropTypes.object,\n    /** Display value */\n    label: PropTypes.string.isRequired,\n    /** Gets called when the user clicks on button */\n    click: PropTypes.func.isRequired,\n    /** Maintain tab index for keyboard navigation. */\n    tabIndex: PropTypes.number.isRequired,\n};\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Modal from 'react-bootstrap/Modal';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Poster from '../poster';\nimport Button from '../button';\n/**\n * Modal component.\n */\nconst MovieModal = ({ show, onHide, movie }) => (\n    <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"movie-details\"\n        className=\"movie-modal\"\n        centered\n    >\n        <Modal.Header>\n            <Modal.Title id=\"movie-details\">{movie.title}</Modal.Title>\n            <Button label=\"Close\" click={onHide} />\n        </Modal.Header>\n        <Modal.Body>\n            <Row>\n                <Col sm lg={4}>\n                    <Poster name={movie.title} url={`${movie.poster_path}`} />\n                </Col>\n                <Col sm lg={8}>\n                    <Row>\n                        <Col md={12}>\n                            <p className=\"h6 text-primary\">Overview</p>\n                            <p className=\"mb-0\">\n                                <em>{movie.overview}</em>\n                            </p>\n                        </Col>\n                    </Row>\n                    <div className=\"dropdown-divider\" />\n                    <dl className=\"row movie-modal__summary--list\">\n                        <dt className=\"col-sm-3 text-primary\">Tagline</dt>\n                        <dd className=\"col-sm-9\">\n                            {movie.tagline || 'Not available'}\n                        </dd>\n                        <dt className=\"col-sm-3 text-primary\">Rating</dt>\n                        <dd className=\"col-sm-9\">{movie.vote_average}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Status</dt>\n                        <dd className=\"col-sm-9\">{movie.status}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Release Date</dt>\n                        <dd className=\"col-sm-9\">{movie.release_date}</dd>\n                        <dt className=\"col-sm-3 text-primary\">Language</dt>\n                        <dd className=\"col-sm-9 text-uppercase\">\n                            {movie.original_language}\n                        </dd>\n                    </dl>\n                </Col>\n            </Row>\n        </Modal.Body>\n    </Modal>\n);\n\nMovieModal.propTypes = {\n    /** Toggle modal */\n    show: PropTypes.bool.isRequired,\n    /** Gets called when the modal is closed. */\n    onHide: PropTypes.func.isRequired,\n    /** Movie details */\n    movie: PropTypes.shape({ title: PropTypes.string }).isRequired,\n};\n\nexport default MovieModal;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from 'react-bootstrap/Collapse';\nimport Switch from '../switch';\nimport Button from '../button';\n/**\n * Filter component.\n */\nclass Filter extends Component {\n    static get propTypes() {\n        return {\n            /** Gets called when the user clicks on the 'Apply' button */\n            onChange: PropTypes.func.isRequired,\n        };\n    }\n    /**\n     * Intilalizes the state and binds all methods.\n     *\n     * @param {Object} props - access 'props'\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            enLangFilter: false,\n            adultFilter: false,\n            ratingFilter: 0,\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.onFilterChange = this.onFilterChange.bind(this);\n    }\n    /**\n     * Prepares filter options and pass to the parent component.\n     */\n    onFilterChange() {\n        const {\n            ratingFilter: vote_average,\n            enLangFilter: original_language,\n            adultFilter: adult,\n        } = this.state;\n        const { onChange } = this.props;\n        const commonFilters = { vote_average, adult };\n        const filters = original_language\n            ? { ...commonFilters, original_language: 'en' }\n            : commonFilters;\n        onChange(filters);\n    }\n    /**\n     * Updates the state as user updates the filter options.\n     *\n     * @param {Event} e - an event from dom controls\n     */\n    handleInputChange(e) {\n        const { target } = e;\n        const { type, name } = target;\n        const value = type === 'checkbox' ? target.checked : target.value;\n        this.setState({ [name]: value });\n    }\n    /**\n     * Render method for component\n     */\n    render() {\n        const { open, ratingFilter } = this.state;\n        return (\n            <div className=\"bg-secondary px-3 rounded\">\n                <section className=\"d-flex justify-content-between align-items-center\">\n                    <h6 className=\"mb-0\">Popular movies</h6>\n                    <Button\n                        tabIndex=\"2\"\n                        label=\"Filter\"\n                        aria={{\n                            'aria-controls': 'movie-filter',\n                            'aria-expanded': open,\n                        }}\n                        click={() => this.setState({ open: !open })}\n                    />\n                </section>\n                <Collapse in={open}>\n                    <div\n                        id=\"movie-filter\"\n                        role=\"toolbar\"\n                        aria-label=\"Filter options\"\n                        className=\"border-top border-primary mt-1 py-3 px-1\"\n                    >\n                        <h6 className=\"text-uppercase\">Filter options</h6>\n                        <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\n                            <div>\n                                <label\n                                    htmlFor=\"rating-filter\"\n                                    aria-label=\"Rating filter\"\n                                    aria-describedby=\"rating-filter\"\n                                >\n                                    Rating (&ge;)\n                                    <input\n                                        type=\"range\"\n                                        className=\"custom-range\"\n                                        aria-label=\"Rating range\"\n                                        onChange={this.handleInputChange}\n                                        name=\"ratingFilter\"\n                                        min=\"0\"\n                                        max=\"10\"\n                                        step=\"0.5\"\n                                        value={ratingFilter}\n                                        id=\"rating-filter\"\n                                        tabIndex=\"3\"\n                                    />\n                                    <span className=\"text-primary position-absolute font-weight-bold ml-2\">\n                                        {ratingFilter}\n                                    </span>\n                                </label>\n                            </div>\n                            <Switch\n                                id=\"adultFilter\"\n                                tabIndex=\"4\"\n                                label=\"Adult\"\n                                switchToggle={this.handleInputChange}\n                            />\n                            <Switch\n                                id=\"enLangFilter\"\n                                tabIndex=\"5\"\n                                label=\"Original Language\"\n                                switchToggle={this.handleInputChange}\n                            />\n                        </div>\n                        <div className=\"mt-1\">\n                            <Button\n                                tabIndex=\"6\"\n                                label=\"Apply\"\n                                click={this.onFilterChange}\n                            />\n                        </div>\n                    </div>\n                </Collapse>\n            </div>\n        );\n    }\n}\n\nexport default Filter;\n","/** Api key for the movie db api. */\nexport const key = '?api_key=7985411c015901cd0f030ce010fa69c4';\n/** Api url for the movie db api. */\nexport const api = 'https://api.themoviedb.org/3';\n/** Image url for the movie poster */\nexport const imageUrl = 'https://image.tmdb.org/t/p/w185_and_h278_bestv2';\n","import axios from 'axios';\n/**\n * Request service for network calls.\n */\nexport default {\n    /**\n     * Get request\n     *\n     * @param {string} url - network request url\n     * @param {Object} request - request configuration\n     */\n    get(url, request) {\n        return axios\n            .get(url, request)\n            .then(resp => Promise.resolve(resp.data))\n            .catch(err => Promise.reject(err));\n    },\n};\n","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport { Poster, Spinner, Modal, Filter } from '../components';\nimport { loadMovies, loadMovieById, filterMovies } from './MovieService';\n\n/**\n * Movie component.\n */\nclass Movies extends Component {\n    /**\n     * Intilalizes the state and binds all methods.\n     *\n     * @param {Object} props - access 'props'\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            movies: [],\n            source: [],\n            movie: {},\n            loading: true,\n            showModal: false,\n        };\n        this.onMovieClick = this.onMovieClick.bind(this);\n        this.onModalClose = this.onModalClose.bind(this);\n        this.onFilterChange = this.onFilterChange.bind(this);\n    }\n    /**\n     * Load movies once component is mounted.\n     */\n    componentDidMount() {\n        loadMovies()\n            .then(movies => this.setState({ movies, source: movies }))\n            .catch(err => console.log(err))\n            .finally(() => this.setState({ loading: false }));\n    }\n    /**\n     * Get a movie details\n     *\n     * @param {number} id - movie id\n     */\n    onMovieClick(id) {\n        loadMovieById(id)\n            .then(movie => this.setState({ showModal: true, movie }))\n            .catch(err => console.log(err))\n            .finally(() => this.setState({ loading: false }));\n    }\n    /**\n     * Toggle modal state on close.\n     *\n     */\n    onModalClose() {\n        this.setState({ showModal: false });\n    }\n    /**\n     * Toggle modal state on close.\n     *\n     * @param {Object} filters - list of set filters\n     */\n    onFilterChange(filters) {\n        const { source } = this.state;\n        const newMovies = filterMovies(source, filters);\n        this.setState({ movies: newMovies });\n    }\n    /**\n     * Render method for component\n     */\n    render() {\n        const { movies, loading, showModal, movie } = this.state;\n        return (\n            <section>\n                <Filter onChange={this.onFilterChange} />\n                <Row className=\"justify-content-center\">\n                    {(!loading &&\n                        movies.map((m, i) => (\n                            <Col className=\"my-3\" key={m.id}>\n                                <Poster\n                                    id={m.id}\n                                    alt={m.name}\n                                    url={m.poster_path}\n                                    click={this.onMovieClick}\n                                    tabIndex={i + 7}\n                                />\n                            </Col>\n                        ))) || <Spinner />}\n                </Row>\n                <Modal\n                    show={showModal}\n                    movie={movie}\n                    onHide={this.onModalClose}\n                />\n            </section>\n        );\n    }\n}\n\nexport default Movies;\n","import { api, key } from '../utils/config';\nimport request from '../utils/request';\n\n/**\n * Load movies from server\n *\n * @returns {Promise}\n */\nconst loadMovies = () =>\n    request\n        .get(`${api}/movie/popular${key}`)\n        .then(({ results: movies }) => Promise.resolve(movies));\n/**\n * Load movie details by id from server\n *\n * @returns {Promise}\n */\nconst loadMovieById = id => request.get(`${api}/movie/${id}${key}`);\n/**\n * Filter movies on given criteria.\n *\n * @param {Array} movies - an array of movies\n * @param {Object} filters - filter options\n * @returns {Array}\n */\nconst filterMovies = (movies, filters) => {\n    const props = Object.keys(filters);\n    return movies.filter(movie =>\n        props.every(prop =>\n            prop === 'vote_average'\n                ? movie[prop] >= filters[prop]\n                : movie[prop] === filters[prop],\n        ),\n    );\n};\n\nexport { loadMovies, loadMovieById, filterMovies };\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { HeaderBar } from './components';\nimport Movies from './movies/Movies';\n\nconst App = () => (\n    <div>\n        <HeaderBar />\n        <Container fluid=\"true\" className=\"py-4\">\n            <Movies />\n        </Container>\n    </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error =>\n            console.error('Error during service worker registration:', error),\n        );\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration =>\n            registration.unregister(),\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}